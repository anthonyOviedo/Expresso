name: Continuous Deployment

on:
  push:
    branches: [main]

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.adapters.cli.Cli
  VERSION: 2.1

permissions:
  contents: write
  actions: write

jobs:

  build-jar:
    runs-on: ubuntu-latest
    outputs:
      cli_jar_name: ${{ steps.pick.outputs.cli_jar_name }}
      rest_jar_name: ${{ steps.pick.outputs.rest_jar_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: Pick main cli and rest JAR
        id: pick
        shell: bash
        run: |
          echo "cli_jar_name=$(basename $(ls expresso-cli/target/*.jar 2>/dev/null || ls expresso-cli/target/*.jar | head -n1))" >> "$GITHUB_OUTPUT"
          echo "rest_jar_name=$(basename $(ls expresso-rest/target/*.jar 2>/dev/null || ls expresso-rest/target/*.jar | head -n1))" >> "$GITHUB_OUTPUT"

      - name: Upload Cli Jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}"
          if-no-files-found: error

      - name: Upload Rest Jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: "expresso-rest/target/${{ steps.pick.outputs.rest_jar_name }}"
          if-no-files-found: error

  test-cli-jar:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: Smoke test CLI jar
        run: |
          set -euo pipefail
          CLI_JAR=$(find target -maxdepth 1 -name '*.jar' -print -quit)
          echo "Testing $CLI_JAR"
          java -jar "$CLI_JAR" --help
          mkdir -p output
          java -jar "$CLI_JAR" transpile examples/HelloWorld0.expresso --out output --verbose
          java -jar "$CLI_JAR" build examples/HelloWorld0.expresso --out output --verbose
          java -jar "$CLI_JAR" run examples/HelloWorld0.expresso --out output --verbose

  test-rest-jar:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Download REST jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: target

      - name: Health-check REST service
        run: |
          set -euo pipefail
          REST_JAR=$(find target -maxdepth 1 -name '*.jar' -print -quit)
          echo "Launching $REST_JAR"
          export SERVER_PORT=8081
          java -jar "$REST_JAR" >/tmp/rest.log 2>&1 &
          PID=$!
          cleanup() {
            kill $PID >/dev/null 2>&1 || true
            wait $PID 2>/dev/null || true
            tail -n 100 /tmp/rest.log || true
          }
          trap cleanup EXIT
          for _ in $(seq 1 30); do
            if curl -sSf "http://127.0.0.1:${SERVER_PORT}/api/v1/health" | grep -q 'ok'; then
              echo "REST healthcheck passed"
              exit 0
            fi
            sleep 2
          done
          echo "REST API failed healthcheck" >&2
          exit 1

  test-docker-image:
    needs:
      - test-rest-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download REST jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: artifacts

      - name: Build Docker image
        run: |
          set -euo pipefail
          REST_JAR=$(find artifacts -maxdepth 1 -name '*.jar' -print -quit)
          if [ -z "$REST_JAR" ]; then
            echo "REST jar not found" >&2
            exit 1
          fi
          mkdir -p expresso-rest/target
          cp "$REST_JAR" expresso-rest/target/
          docker build -f dockerfile -t ${APP_NAME}-rest:${VERSION} .

      - name: Smoke test Docker image
        run: |
          set -euo pipefail
          IMAGE="${APP_NAME}-rest:${VERSION}"
          CONTAINER="rest-smoke-${GITHUB_RUN_NUMBER}"
          docker run --rm -d --name "$CONTAINER" -e SERVER_PORT=8082 -p 8082:8082 "$IMAGE"
          cleanup() {
            docker logs "$CONTAINER" || true
            docker stop "$CONTAINER" >/dev/null 2>&1 || true
          }
          trap cleanup EXIT
          for _ in $(seq 1 30); do
            if curl -sSf http://127.0.0.1:8082/api/v1/health | grep -q 'ok'; then
              echo "Dockerized REST healthcheck passed"
              exit 0
            fi
            sleep 2
          done
          echo "Dockerized REST API failed healthcheck" >&2
          exit 1

  cli-installer-deb:
    needs:
      - test-cli-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install jpackage deps (deb)
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev binutils file

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: Write Debian maintainer scripts (symlink in PATH)
        shell: bash
        run: |
          mkdir -p packaging

          cat > packaging/postinst <<'EOF'
          #!/bin/sh
          ln -sf /opt/"${APP_NAME}"/bin/"${APP_NAME}" /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF

          cat > packaging/postrm <<'EOF'
          # packaging/postrm
          #!/bin/sh
          rm -f /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF

          chmod 755 packaging/postinst packaging/postrm

      - name: jpackage -> .deb (CLI only)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          jpackage \
            --type deb \
            --name "${APP_NAME}" \
            --linux-package-name "${APP_NAME}" \
            --input target \
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" \
            --main-class "${MAIN_CLASS}" \
            --app-version "${VERSION}" \
            --linux-deb-maintainer "Expresso Team <antony-08@hotmail.com>" \
            --resource-dir packaging \
            --dest dist \
            --verbose

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          path: dist/*.deb
          if-no-files-found: error

  cli-installer-msi:
    needs:
      - test-cli-jar
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install WiX
        shell: powershell
        run: choco install wixtoolset -y

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: jpackage -> app-image (CLI-only)
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path out | Out-Null
          jpackage `
            --type app-image `
            --name "$env:APP_NAME" `
            --input target `
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" `
            --main-class "$env:MAIN_CLASS" `
            --win-console `
            --dest out

      - name: WiX harvest
        shell: powershell
        run: |
              $src = Join-Path $PWD "out\$env:APP_NAME"
              & "$env:WIX\bin\heat.exe" dir $src -cg AppFiles -dr INSTALLFOLDER -srd -var var.SourceDir -ag -out harvest.wxs

      - name: Build MSI (WiX)
        shell: powershell
        run: |
          & "$env:WIX\bin\candle.exe" -arch x64 -dSourceDir="$(Join-Path $PWD "out\$env:APP_NAME")" -out obj\ packaging/windows/product.wxs harvest.wxs
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          & "$env:WIX\bin\light.exe" -ext WixUtilExtension -sval -o "dist\${{env.APP_NAME}}-${{env.VERSION}}.msi" obj\product.wixobj obj\harvest.wixobj

      - name: Upload .msi
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.VERSION}}.msi
          path: dist/*.msi
          if-no-files-found: error

  Create-cli-Release:
    runs-on: ubuntu-latest
    needs:
      - build-jar
      - cli-installer-deb
      - cli-installer-msi
      - test-cli-jar
      - test-rest-jar
      - test-docker-image
    steps:
      - uses: actions/checkout@v4

      - name: Ensure version tag is new
        run: |
          git fetch --tags
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists. Bump the version before releasing." >&2
            exit 1
          fi

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: artifacts

      - name: Download .deb
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          path: artifacts

      - name: Download .msi
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}.msi
          path: artifacts

      - name: Create GitHub Release + upload assets
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          target_commitish: ${{ github.sha }}
          name: "${{ env.APP_NAME }} v${{ env.VERSION }}"
          generate_release_notes: true
          files: |
            artifacts/*.jar
            artifacts/*.deb
            artifacts/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Discord notify (success)
        if: ${{ success() }}
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ✅ **Release created**
            • App: **${{ env.APP_NAME }}** v${{ env.VERSION }}
            • Tag: `${{ github.ref_name }}`
            • Author: ${{ github.actor }}
            • Commit: `${{ github.sha }}`
            • Release: ${{ steps.gh_release.outputs.html_url }}
            • Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Discord notify (failure)
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ❌ **Release failed**
            • App: **${{ env.APP_NAME }}** v${{ env.VERSION }}
            • Ref: `${{ github.ref_name }}`
            • Author: ${{ github.actor }}
            • Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  docker-image:
    needs: Create-cli-Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"

      - name: Build Docker image
        run: |
          mkdir -p docker/artifact
          mv "${{ env.APP_NAME }}-${{ env.VERSION }}.jar" docker/artifact/expresso.jar
          docker build -t expressor:latest \
            -f dockerfile \
            docker
      - name: Run Docker image (test)
        run: |
          docker run expressor:latest
          wget -qO- http://localhost:8080/health

      - name: upload Docker image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: ./docker
          file: ./docker/dockerfile
          push: true
          tags: antonyOviedo/expressor:latest
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Delete workflow artifacts
        if: ${{ always() }}
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            ${{ env.APP_NAME }}-${{ env.VERSION }}.jar
            ${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar
            ${{ env.APP_NAME }}-${{ env.VERSION }}.deb
            ${{ env.APP_NAME }}-${{ env.VERSION }}.msi
