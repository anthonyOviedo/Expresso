name: Continuous Deployment

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.adapters.cli.Cli
  VERSION: 3.1

permissions:
  contents: write
  actions: write

jobs:
  release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: self-hosted
    steps:
      - name: Checkout source at released commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          run-id: ${{ github.event.workflow_run.id }}
          path: artifacts/cli
          if-no-files-found: error

      - name: Download REST jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          run-id: ${{ github.event.workflow_run.id }}
          path: artifacts/rest
          if-no-files-found: error

      - name: Download Debian package
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          run-id: ${{ github.event.workflow_run.id }}
          path: artifacts/deb
          if-no-files-found: error

      - name: Download MSI installer
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.msi"
          run-id: ${{ github.event.workflow_run.id }}
          path: artifacts/msi
          if-no-files-found: error

      - name: Download EXE installer
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.exe"
          run-id: ${{ github.event.workflow_run.id }}
          path: artifacts/exe
          if-no-files-found: error

      - name: Ensure version tag is new
        run: |
          git fetch --tags
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists. Bump the version before releasing." >&2
            exit 1
          fi

      - name: Create GitHub Release + upload assets
        id: gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}"
          target_commitish: ${{ github.event.workflow_run.head_sha }}
          name: "${{ env.APP_NAME }} v${{ env.VERSION }}"
          generate_release_notes: true
          files: |
            artifacts/cli/*.jar
            artifacts/rest/*.jar
            artifacts/deb/*.deb
            artifacts/msi/*.msi
            artifacts/exe/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Prepare Docker context
        run: |
          set -euo pipefail
          REST_JAR=$(find artifacts/rest -maxdepth 1 -name '*.jar' -print -quit)
          mkdir -p expresso-rest/target
          cp "$REST_JAR" expresso-rest/target/

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: dockerfile
          push: true
          tags: |
            antonyOviedo/${{ env.APP_NAME }}-rest:${{ env.VERSION }}
            antonyOviedo/${{ env.APP_NAME }}-rest:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKERHUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Delete workflow artifacts
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId,
              per_page: 100
            });
            for (const artifact of artifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }

      - name: Discord notify (success)
        if: ${{ success() }}
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ✅ **Release created**
            • App: **${{ env.APP_NAME }}** v${{ env.VERSION }}
            • Tag: `v${{ env.VERSION }}`
            • Commit: `${{ github.event.workflow_run.head_sha }}`
            • Release: ${{ steps.gh_release.outputs.html_url }}
            • Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Discord notify (failure)
        if: ${{ failure() }}
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ❌ **Release failed**
            • App: **${{ env.APP_NAME }}** v${{ env.VERSION }}
            • Ref: `${{ github.event.workflow_run.head_branch }}`
            • Commit: `${{ github.event.workflow_run.head_sha }}`
