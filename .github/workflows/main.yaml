name: Build JAR, then package (.deb / .msi)

on:
  push:
    branches: [ 34-crear-java-image ]
  pull_request:

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.Expressor

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar_name: ${{ steps.pick.outputs.jar_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: Pick main JAR (prefer *-runner.jar)
        id: pick
        shell: bash
        run: |
          set -e
          jar=$(ls -1 target/*-runner.jar 2>/dev/null || true)
          if [ -z "$jar" ]; then jar=$(ls -1 target/*.jar | head -n1); fi
          test -n "$jar" || { echo "No JAR found in target/"; exit 1; }
          echo "Picked: $(basename "$jar")"
          echo "jar_name=$(basename "$jar")" >> "$GITHUB_OUTPUT"

      - name: Upload JARs
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          if-no-files-found: error

  package-deb:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install jpackage deps (deb)
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev binutils file desktop-file-utils

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: Write Debian maintainer scripts (postinstall/postrm)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p packaging

          # postinstall: crea/actualiza symlink /usr/local/bin/expressor -> /opt/expressor/bin/expressor
          cat > packaging/postinstall <<'EOF'
          #!/bin/sh
          set -e
          APP="expressor"
          TARGET="/opt/$APP/bin/$APP"
          LINK="/usr/local/bin/$APP"
          if [ -x "$TARGET" ]; then
            ln -sf "$TARGET" "$LINK"
          fi
          # best-effort: refrescar cachés de escritorio/iconos si existen
          if command -v update-desktop-database >/dev/null 2>&1; then update-desktop-database -q || true; fi
          if command -v gtk-update-icon-cache >/dev/null 2>&1; then gtk-update-icon-cache -q /usr/share/icons/hicolor || true; fi
          exit 0
          EOF

          # postrm: elimina symlink sólo si apunta a nuestro binario
          cat > packaging/postrm <<'EOF'
          #!/bin/sh
          set -e
          APP="expressor"
          TARGET="/opt/$APP/bin/$APP"
          LINK="/usr/local/bin/$APP"
          case "$1" in
            remove|purge)
              if [ -L "$LINK" ] && [ "$(readlink -f "$LINK")" = "$TARGET" ]; then
                rm -f "$LINK"
              fi
              ;;
          esac
          exit 0
          EOF

          # Compat: algunos JDKs usan nombres "postinst/postrm" en lugar de "postinstall/postrm"
          cp packaging/postinstall packaging/postinst

          chmod 755 packaging/postinstall packaging/postinst packaging/postrm

      - name: jpackage -> .deb (icon & shortcut + postinstall symlink)
        shell: bash
        run: |
          set -euo pipefail
          ICON="assets/icon.png"   # asegúrate de tener este archivo en el repo
          test -f "$ICON" || { echo "::error::Missing $ICON"; exit 1; }
          mkdir -p dist
          jpackage \
            --type deb \
            --name "${APP_NAME}" \
            --linux-package-name "${APP_NAME}" \
            --input target \
            --main-jar "${{ needs.build-jar.outputs.jar_name }}" \
            --main-class "${MAIN_CLASS}" \
            --icon "$ICON" \
            --linux-shortcut \
            --app-version 1.0 \
            --linux-deb-maintainer "Expresso Team <antony-08@hotmail.com>" \
            --resource-dir packaging \
            --dest dist \
            --verbose

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb
          path: dist/*.deb
          if-no-files-found: error

  package-msi:
    needs: build-jar
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install WiX Toolset (required for MSI)
        shell: powershell
        run: |
          choco install wixtoolset -y
          $wixBin = "${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin"
          if (Test-Path $wixBin) { $wixBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target

      - name: jpackage -> .msi (menu & shortcut; icon opcional)
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $Icon = "$env:GITHUB_WORKSPACE\assets\icon.ico"
          $iconArg = ""
          if (Test-Path $Icon) { $iconArg = "--icon `"$Icon`"" }
          jpackage `
            --type msi `
            --name "$env:APP_NAME" `
            --input target `
            --main-jar "${{ needs.build-jar.outputs.jar_name }}" `
            --main-class "$env:MAIN_CLASS" `
            --win-menu `
            --win-shortcut `
            $iconArg `
            --dest dist `
            --verbose

      - name: Upload .msi artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msi
          path: dist/*.msi
          if-no-files-found: error
