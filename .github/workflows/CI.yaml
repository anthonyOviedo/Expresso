name: CI and CDelivery for the CLI app

on:
  push:
    branches: [dev]
    branches: [dev]

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.adapters.cli.Cli
  VERSION: 3.1

permissions:
  contents: write
  actions: write

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      cli_jar_name: ${{ steps.pick.outputs.cli_jar_name }}
      rest_jar_name: ${{ steps.pick.outputs.rest_jar_name }}
      dockerhub_available: ${{ steps.check-docker.outputs.available }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Build with Maven
        run: mvn -B -DskipTests package

      - name: Check Docker Hub credentials
        id: check-docker
        shell: bash
        run: |
          if [ -n "${DOCKERHUB_USERNAME:-}" ] && [ -n "${DOCKERHUB_TOKEN:-}" ]; then
            echo "available=true" >> "$GITHUB_OUTPUT"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Pick main cli and rest JAR
        id: pick
        shell: bash
        run: |
          set -euo pipefail
          CLI_JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$CLI_JAR" ]; then
            CLI_JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$CLI_JAR" ]; then
            echo "No CLI jar found under expresso-cli/target" >&2
            ls expresso-cli/target >&2 || true
            exit 1
          fi
          REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$REST_JAR" ]; then
            REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$REST_JAR" ]; then
            echo "No REST jar found under expresso-rest/target" >&2
            ls expresso-rest/target >&2 || true
            exit 1
          fi
          echo "cli_jar_name=$(basename "$CLI_JAR")" >> "$GITHUB_OUTPUT"
          echo "rest_jar_name=$(basename "$REST_JAR")" >> "$GITHUB_OUTPUT"

      - name: Test JAR
        run: |
          echo "Testing ${{ steps.pick.outputs.cli_jar_name }}"
          java -jar "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}" --help
          mkdir -p output
          java -jar "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}" transpile examples/HelloWorld0.expresso --out output --verbose
          java -jar "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}" build examples/HelloWorld0.expresso --out output --verbose
          java -jar "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}" run examples/HelloWorld0.expresso --out output --verbose

      - name: Upload Cli Jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}"
          if-no-files-found: error

      - name: Upload Rest Jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: "expresso-rest/target/${{ steps.pick.outputs.rest_jar_name }}"
          if-no-files-found: error

  cli-installer-deb:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install jpackage deps (deb)
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev binutils file

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: Write Debian maintainer scripts (symlink in PATH)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p packaging

          # postinst
          cat > packaging/postinst <<'EOF'
          #!/bin/sh
          set -e
          ln -sf /opt/"${APP_NAME}"/bin/"${APP_NAME}" /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF

          # postrm
          cat > packaging/postrm <<'EOF'
          #!/bin/sh
          set -e
          rm -f /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF


          chmod 755 packaging/postinst packaging/postrm

      - name: jpackage -> .deb (CLI only)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          jpackage \
            --type deb \
            --name "${APP_NAME}" \
            --linux-package-name "${APP_NAME}" \
            --input target \
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" \
            --main-class "${MAIN_CLASS}" \
            --app-version "${VERSION}" \
            --linux-deb-maintainer "Expresso Team <antony-08@hotmail.com>" \
            --resource-dir packaging \
            --dest dist \
            --verbose

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          path: dist/*.deb
          if-no-files-found: error
  
  cli-installer-msi:
    needs: build-jar
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install WiX
        shell: powershell
        run: choco install wixtoolset -y

      - name: Download JARs
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: jpackage -> MSI
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          jpackage `
            --type msi `
            --name "$env:APP_NAME" `
            --input target `
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" `
            --main-class "$env:MAIN_CLASS" `
            --dest dist `
            --app-version "$env:VERSION" `
            --vendor "Expresso Team" `
            --win-console `
            --win-menu `
            --win-menu-group "Expresso" `
            --win-dir-chooser

      - name: Upload .msi
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.APP_NAME}}-${{env.VERSION}}.msi
          path: dist/*.msi
          if-no-files-found: error
