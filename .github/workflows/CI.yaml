name: CI

on:
  push:
    branches: [dev]

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.adapters.cli.Cli
  VERSION: 3.1

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      cli_jar_name: ${{ steps.pick.outputs.cli_jar_name }}
      rest_jar_name: ${{ steps.pick.outputs.rest_jar_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Build and run unit tests
        run: mvn -B clean verify

      - name: Pick CLI jar
        id: pick
        run: |
          set -euo pipefail
          JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$JAR" ]; then
            JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$JAR" ]; then
            echo "No CLI jar found under expresso-cli/target" >&2
            ls expresso-cli/target >&2 || true
            exit 1
          fi
          echo "cli_jar_name=$(basename "$JAR")" >> "$GITHUB_OUTPUT"

      - name: Pick REST jar
        id: pick-rest
        run: |
          set -euo pipefail
          REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$REST_JAR" ]; then
            REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$REST_JAR" ]; then
            echo "No REST jar found under expresso-rest/target" >&2
            ls expresso-rest/target >&2 || true
            exit 1
          fi
          echo "rest_jar_name=$(basename "$REST_JAR")" >> "$GITHUB_OUTPUT"

      - name: Upload CLI jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: "expresso-cli/target/${{ steps.pick.outputs.cli_jar_name }}"
          if-no-files-found: error

      - name: Upload REST jar
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: "expresso-rest/target/${{ steps.pick-rest.outputs.rest_jar_name }}"
          if-no-files-found: error

  test-cli-jar:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: Smoke test CLI jar
        run: |
          set -euo pipefail
          CLI_JAR=$(find target -maxdepth 1 -name '*.jar' -print -quit)
          echo "Testing $CLI_JAR"
          java -jar "$CLI_JAR" --help
          mkdir -p output
          java -jar "$CLI_JAR" transpile examples/HelloWorld0.expresso --out output --verbose
          java -jar "$CLI_JAR" build examples/HelloWorld0.expresso --out output --verbose
          java -jar "$CLI_JAR" run examples/HelloWorld0.expresso --out output --verbose

  test-rest-jar:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download REST jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: target

      - name: Health-check REST service
        run: |
          set -euo pipefail
          REST_JAR=$(find target -maxdepth 1 -name '*.jar' -print -quit)
          echo "Launching $REST_JAR"
          export SERVER_PORT=8081
          java -jar "$REST_JAR" >/tmp/rest.log 2>&1 &
          PID=$!
          cleanup() {
            kill $PID >/dev/null 2>&1 || true
            wait $PID 2>/dev/null || true
            tail -n 100 /tmp/rest.log || true
          }
          trap cleanup EXIT
          for _ in $(seq 1 30); do
            if curl -sSf "http://127.0.0.1:${SERVER_PORT}/api/v1/health" | grep -q 'ok'; then
              echo "REST healthcheck passed"
              exit 0
            fi
            sleep 2
          done
          echo "REST API failed healthcheck" >&2
          exit 1

  test-docker-image:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download REST jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}-rest.jar"
          path: artifacts

      - name: Build Docker image
        run: |
          set -euo pipefail
          REST_JAR=$(find artifacts -maxdepth 1 -name '*.jar' -print -quit)
          if [ -z "$REST_JAR" ]; then
            echo "REST jar not found" >&2
            exit 1
          fi
          mkdir -p expresso-rest/target
          cp "$REST_JAR" expresso-rest/target/
          docker build -f dockerfile -t ${APP_NAME}-rest:${VERSION} .

      - name: Smoke test Docker image
        run: |
          set -euo pipefail
          IMAGE="${APP_NAME}-rest:${VERSION}"
          CONTAINER="rest-smoke-${GITHUB_RUN_NUMBER}"
          docker run --rm -d --name "$CONTAINER" -e SERVER_PORT=8082 -p 8082:8082 "$IMAGE"
          cleanup() {
            docker logs "$CONTAINER" || true
            docker stop "$CONTAINER" >/dev/null 2>&1 || true
          }
          trap cleanup EXIT
          for _ in $(seq 1 30); do
            if curl -sSf http://127.0.0.1:8082/api/v1/health | grep -q 'ok'; then
              echo "Dockerized REST healthcheck passed"
              exit 0
            fi
            sleep 2
          done
          echo "Dockerized REST API failed healthcheck" >&2
          exit 1

  cli-installer-deb:
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install jpackage deps (deb)
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev binutils file

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: Write Debian maintainer scripts
        run: |
          set -euo pipefail
          mkdir -p packaging
          cat > packaging/postinst <<'EOF'
          #!/bin/sh
          set -e
          ln -sf /opt/"${APP_NAME}"/bin/"${APP_NAME}" /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF
          cat > packaging/postrm <<'EOF'
          #!/bin/sh
          set -e
          rm -f /usr/local/bin/"${APP_NAME}"
          exit 0
          EOF
          chmod 755 packaging/postinst packaging/postrm

      - name: jpackage -> .deb
        run: |
          set -euo pipefail
          mkdir -p dist
          jpackage \
            --type deb \
            --name "${APP_NAME}" \
            --linux-package-name "${APP_NAME}" \
            --input target \
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" \
            --main-class "${MAIN_CLASS}" \
            --app-version "${VERSION}" \
            --linux-deb-maintainer "Expresso Team <antony-08@hotmail.com>" \
            --resource-dir packaging \
            --dest dist \
            --verbose

      - name: Upload .deb
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          path: dist/*.deb
          if-no-files-found: error

  test-deb:
    needs: cli-installer-deb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.deb"
          path: artifacts

      - name: Inspect and install .deb
        run: |
          set -euo pipefail
          DEB_FILE=$(find artifacts -maxdepth 1 -name '*.deb' -print -quit)
          echo "Inspecting $DEB_FILE"
          dpkg-deb --info "$DEB_FILE"
          dpkg-deb --contents "$DEB_FILE" | grep -E "/usr/local/bin/${APP_NAME}$"
          sudo dpkg -i "$DEB_FILE"
          /usr/local/bin/"${APP_NAME}" --help
          sudo dpkg -r "${APP_NAME}"

  cli-installer-msi:
    needs: build-jar
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install WiX
        shell: powershell
        run: choco install wixtoolset -y

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: jpackage -> MSI
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          jpackage `
            --type msi `
            --name "$env:APP_NAME" `
            --input target `
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" `
            --main-class "$env:MAIN_CLASS" `
            --dest dist `
            --app-version "$env:VERSION" `
            --vendor "Expresso Team" `
            --win-console `
            --win-menu `
            --win-menu-group "Expresso" `
            --win-dir-chooser

      - name: Upload .msi
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.msi"
          path: dist/*.msi
          if-no-files-found: error

  test-msi:
    needs: cli-installer-msi
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.msi"
          path: artifacts

      - name: Install MSI and verify CLI
        shell: powershell
        run: |
          $msi = Get-ChildItem -Path artifacts -Filter *.msi | Select-Object -First 1
          if(-not $msi){ throw "MSI not found" }
          Start-Process msiexec.exe -ArgumentList '/i', $msi.FullName, '/qn', '/norestart' -Wait -NoNewWindow
          $cli = "C:\Program Files\${env:APP_NAME}\bin\${env:APP_NAME}.exe"
          if(-not (Test-Path $cli)){ throw "CLI executable not found" }
          & $cli --help
          Start-Process msiexec.exe -ArgumentList '/x', $msi.FullName, '/qn', '/norestart' -Wait -NoNewWindow

  cli-installer-exe:
    needs: build-jar
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'

      - name: Install WiX
        shell: powershell
        run: choco install wixtoolset -y

      - name: Download CLI jar
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.jar"
          path: target

      - name: jpackage -> EXE
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          jpackage `
            --type exe `
            --name "$env:APP_NAME" `
            --input target `
            --main-jar "${{ needs.build-jar.outputs.cli_jar_name }}" `
            --main-class "$env:MAIN_CLASS" `
            --dest dist `
            --app-version "$env:VERSION" `
            --vendor "Expresso Team" `
            --win-console `
            --win-menu `
            --win-menu-group "Expresso" `
            --win-dir-chooser

      - name: Upload .exe
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.exe"
          path: dist/*.exe
          if-no-files-found: error

  test-exe:
    needs: cli-installer-exe
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-${{ env.VERSION }}.exe"
          path: artifacts

      - name: Install EXE and verify CLI
        shell: powershell
        run: |
          $exe = Get-ChildItem -Path artifacts -Filter *.exe | Select-Object -First 1
          if(-not $exe){ throw "EXE not found" }
          Start-Process $exe.FullName -ArgumentList '/install', '/quiet', '/norestart' -Wait -NoNewWindow
          $cli = "C:\Program Files\${env:APP_NAME}\bin\${env:APP_NAME}.exe"
          if(-not (Test-Path $cli)){ throw "CLI executable not found" }
          & $cli --help
          Start-Process $exe.FullName -ArgumentList '/uninstall', '/quiet', '/norestart' -Wait -NoNewWindow
