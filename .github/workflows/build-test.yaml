name: Build JAR -> Test JAR 

on:
  pull_request: 

env:
  APP_NAME: expressor
  MAIN_CLASS: com.diezam04.expresso.adapters.cli.Cli

jobs:
  build-cli-jar:
    runs-on: ubuntu-latest
    outputs:
      jar_name: ${{ steps.pick.outputs.jar_name }}
      rest_jar_name: ${{ steps.pick-rest.outputs.rest_jar_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 24
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: maven

      - name: Build & run unit tests
        run: mvn -B clean verify

      - name: Pick main cli JAR
        id: pick
        run: |
          set -euo pipefail
          JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$JAR" ]; then
            JAR=$(find expresso-cli/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$JAR" ]; then
            echo "No CLI jar found under expresso-cli/target" >&2
            ls expresso-cli/target >&2 || true
            exit 1
          fi
          echo "jar_name=$(basename "$JAR")" >> "$GITHUB_OUTPUT"

      - name: Pick REST JAR
        id: pick-rest
        run: |
          set -euo pipefail
          REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*-shaded.jar' | sort | head -n1)
          if [ -z "$REST_JAR" ]; then
            REST_JAR=$(find expresso-rest/target -maxdepth 1 -type f -name '*.jar' | sort | head -n1)
          fi
          if [ -z "$REST_JAR" ]; then
            echo "No REST jar found under expresso-rest/target" >&2
            ls expresso-rest/target >&2 || true
            exit 1
          fi
          echo "rest_jar_name=$(basename "$REST_JAR")" >> "$GITHUB_OUTPUT"

      - name: Test Cli JAR
        run: |
          set -euo pipefail
          JAR="expresso-cli/target/${{ steps.pick.outputs.jar_name }}"
          echo "Testing $JAR"
          java -jar "$JAR" --help
          mkdir -p output
          java -jar "$JAR" transpile examples/HelloWorld0.expresso --out output --verbose
          java -jar "$JAR" build examples/HelloWorld0.expresso --out output --verbose
          java -jar "$JAR" run examples/HelloWorld0.expresso --out output --verbose

      - name: Smoke test REST JAR
        run: |
          set -euo pipefail
          REST_JAR="expresso-rest/target/${{ steps.pick-rest.outputs.rest_jar_name }}"
          echo "Starting REST service from $REST_JAR"
          export SERVER_PORT=8081
          java -jar "$REST_JAR" >/tmp/rest.log 2>&1 &
          PID=$!
          cleanup() {
            kill $PID >/dev/null 2>&1 || true
            wait $PID 2>/dev/null || true
            tail -n 100 /tmp/rest.log || true
          }
          trap cleanup EXIT
          for _ in $(seq 1 30); do
            if curl -sSf "http://127.0.0.1:${SERVER_PORT}/api/v1/health" | grep -q 'ok'; then
              echo "REST healthcheck passed"
              exit 0
            fi
            sleep 2
          done
          echo "REST API failed healthcheck" >&2
          exit 1

      - name: Build Docker image
        run: |
          ls expresso-rest/target
          docker build -f dockerfile -t expresso-rest:ci .

      - name: Discord notify success (apps deployment)
        if: success()
        uses: Ilshidur/action-discord@0.3.2
        with:
          args: |
            üñ•Ô∏è ‚úÖ Apps are tested and ready to be used .
            Commit `${{ github.sha }}`
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # - name: Discord notify failure (apps deployment)
      #   if: failure()
      #   uses: Ilshidur/action-discord@0.3.2
      #   with:
      #     args: |
      #       üñ•Ô∏è ‚ùå Failed Testing in development.
      #       Commit `${{ github.sha }}`
      #       Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #   env:
      #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }} 



 
