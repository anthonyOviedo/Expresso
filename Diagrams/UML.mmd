classDiagram
%% =======================
%% Paquetes / namespaces 
%% =======================

namespace expresso{
  class Expressor {
    +main(String[] args) void
  }
}

namespace expresso.Cli {
  class Cli {
    +main(String[] args) void
    +run() void
    -processFile(File source, String outDir, String extension, Function<String,String> transformer, Runnable postProcess) Integer
    +transpile(File source, String outDir, boolean verbose) Integer
    +build(File source, String outDir, boolean verbose) Integer
    +run(File source, String outDir, boolean verbose) Integer
  }
}

namespace expresso.Transpiler {
  class Transpiler {
    +run(String expressoFileOrContent) String
  }
}

namespace expresso.Builder {
  class Builder {
    +run(String javaSource) String
  }
}

namespace expresso.Runner {
  class Runner {
    +run(String classFilePath) String
  }
}

namespace expresso.Tester {
  class Tester {
    +test(String classFilePath) boolean
  }
}

namespace expresso.Utils {
  class Utils {
    +setVerbose(Boolean) void
    +getVerbose() Boolean
    +log(String message, String state) void
    +writeFile(File source, String content, String extension, String outDir) int
    +loadFile(File source) String
    +extractClassName(String javaSource) Optional~String~
    +tempFile(String content, String ext) File
    +hasAllowedSourceExtension(File f) boolean
  }
}

%% =======================
%% Relaciones internas 
%% =======================
Expressor ..> Cli : usa
Cli ..> Transpiler : usa (transpile)
Cli ..> Builder : usa (build)
Cli ..> Runner : orquesta (run)
Cli ..> Utils : usa (logs, load/write)

Builder ..> Transpiler : puede invocar / depende (Builder.run usa cÃ³digo generado por Transpiler)
Builder ..> Utils : usa

Transpiler ..> Utils : usa (loadFile, validaciones)
Runner ..> Tester : valida antes de ejecutar
Tester ..> Builder : verifica/relacion con salida de Builder (.class)
Tester ..> Utils : usa (logs)
Runner ..> Utils : usa (logs)
